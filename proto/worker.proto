syntax = "proto3";

package minorhacks.bazel_remote_query;

import "google/protobuf/timestamp.proto";

service QueryQueue {
  rpc Queue(QueueRequest) returns (QueueResponse);
  rpc Poll(PollRequest) returns (PollResponse);
}

message QueueRequest {
  // URL of the repository to query
  string repository = 1;

  // Commit hash to query
  string commit_hash = 2;

  // Bazel query to run
  string query_string = 3;
}

message QueueResponse {
  // ID of job to poll for results
  string id = 1;
}

message PollRequest {
  // ID of job to get results
  string id = 1;
}

message PollResponse {
  string id = 1;

  message QueryInProgress {
    // The next poll should happen after this time.
    google.protobuf.Timestamp next_poll_time = 1;
  }

  message QuerySuccess {
    // GCS URL of the blob containing the query output, in the form
    // `gcs://$BUCKET/$FILENAME`
    string results_gcs_url = 1;
  }

  message QueryFailure {
    // Bazel error message of failed query
    string failure_message = 1;
  }

  oneof status {
    QueryInProgress in_progress = 2;
    QuerySuccess success = 3;
    QueryFailure failure = 4;
  }
}

service QueryDispatch {
  rpc GetQueryJob(GetQueryJobRequest) returns (GetQueryJobResponse);
  rpc FinishQueryJob(FinishQueryJobRequest) returns (FinishQueryJobResponse);
}

message GetQueryJobRequest {
  // Name of the worker making the request. This helps audit which jobs were
  // assigned to which workers, in case workers go away or behave poorly.
  string worker_name = 1;
}

message GetQueryJobResponse {
  // If there is a job available, this message describes the query the worker
  // should execute. If not set, there is no job available, and the worker
  // should sleep.
  QueryJob job = 1;

  // Regardless of whether there is a job available, the worker should not poll
  // until after next_poll_time.
  google.protobuf.Timestamp next_poll_time = 2;
}

message FinishQueryJobRequest {
  // The ID of the completed query job.
  string query_job_id = 1;

  oneof result {
    // If set, the query was successful, and the result is uploaded to GCS
    // at this URL in the format `gcs://$BUCKET/$CONTENT_HASH`
    string query_result_gcs_location = 2;

    // If set, the query was unsuccessful, and this contains the error text.
    string failure_message = 3;
  }
}

message FinishQueryJobResponse {}

message QueryJob {
  string id = 1;

  // TODO: Query type?

  string query = 2;

  // TODO: Bazel flags?

  GitCommit source = 3;
}

message GitCommit {
  string repo = 1;
  string committish = 2;
}

// TODO: Move this to another file?
message WorkerConfig {
  // Path to dir that worker can use to clone bazel workspaces and run queries
  string base_dir = 1;

  // List of git repositories to clone and initialize
  repeated string git_repository_urls = 2;

  // host:port of the QueryDispatch service to contact
  string dispatcher_address = 3;

  // GCS bucket in which results should be placed
  string results_gcs_bucket = 4;
}

// TODO: Move this to another file?
message DispatcherConfig {
  oneof database {
    //
    SqliteConfig sqlite = 1;
    DatastoreConfig datastore = 3;
  }

  string grpc_port = 2;
}

message SqliteConfig {
  // Path to the database file on disk. If it doesn't exist, will be created.
  // Parent directory should already exist.
  string db_path = 1;
}

message DatastoreConfig {}